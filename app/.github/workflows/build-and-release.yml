name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      draft:
        description: 'Create draft release'
        type: boolean
        default: true

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: '8'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./app
        
      - name: TypeScript check
        run: pnpm run typecheck
        working-directory: ./app
        
      - name: Run tests
        run: pnpm run test
        working-directory: ./app
        
      - name: Build application
        run: pnpm run build
        working-directory: ./app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Prepare artifacts (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p artifacts
          cp app/dist/*.dmg artifacts/ 2>/dev/null || true
          cp app/dist/*.zip artifacts/ 2>/dev/null || true
          
      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifacts
          cp app/dist/*.exe artifacts/ 2>$null || echo "No exe files found"
          cp app/dist/*.msi artifacts/ 2>$null || echo "No msi files found"
          
      - name: Prepare artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts
          cp app/dist/*.AppImage artifacts/ 2>/dev/null || true
          cp app/dist/*.deb artifacts/ 2>/dev/null || true
          cp app/dist/*.tar.gz artifacts/ 2>/dev/null || true
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: artifacts/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist-artifacts/**/*
          draft: ${{ github.event.inputs.draft || true }}
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-update-test:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Test auto-updater config
        run: |
          echo "Testing auto-updater configuration..."
          echo "Release tag: ${{ github.ref_name }}"
          echo "Draft release: ${{ github.event.inputs.draft || true }}"
          
      - name: Validate release assets
        run: |
          echo "Validating release assets are properly uploaded..."
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
            | jq '.assets[].name'